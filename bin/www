#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('muhtarasor-backend:server');
var http = require('http');
var logger = require('../lib/logger');
var mongoose = require('mongoose');
var totalCPUs = require("os").cpus().length;
var config = require('../lib/config');
var cluster = require("cluster");

if (cluster.isMaster) {
  logger.info(`Number of CPUs is ${totalCPUs}!`);
  logger.info("I am the lucky worker!");
  for (let i = 0; i < 2; i++) {
    cluster.fork();
  }
  cluster.on("exit", (worker, code, signal) => {
    logger.error(`worker ${worker.process.pid} died!`);
    logger.info("Let's fork another worker!");
    cluster.fork();
  });
} else {

  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  async function onListening() {
    logger.info(`Worker ${process.pid} started!`);
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    logger.info('Listening on ' + bind);
    // debug('Listening on ' + bind);
    //Connect to db
    try {
      await mongoose.connect(
        config.DB_CONNECTION_STRING
      );
      logger.info('Mongo connection established!');
    } catch (error) {
      logger.error('Mongo connection failed!');
      logger.error(error);
      process.exit(1);
    }
  }
}